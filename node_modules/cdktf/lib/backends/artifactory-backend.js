"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateArtifactory = exports.ArtifactoryBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
/**
 * @deprecated CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.
 */
class ArtifactoryBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "artifactory");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateArtifactory(scope, name, this.props);
    }
}
_a = JSII_RTTI_SYMBOL_1;
ArtifactoryBackend[_a] = { fqn: "cdktf.ArtifactoryBackend", version: "0.17.3" };
exports.ArtifactoryBackend = ArtifactoryBackend;
/**
 * @deprecated CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.
 */
class DataTerraformRemoteStateArtifactory extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "artifactory", config);
    }
}
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateArtifactory[_b] = { fqn: "cdktf.DataTerraformRemoteStateArtifactory", version: "0.17.3" };
exports.DataTerraformRemoteStateArtifactory = DataTerraformRemoteStateArtifactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RvcnktYmFja2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFydGlmYWN0b3J5LWJhY2tlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw0REFBd0Q7QUFDeEQsa0NBQTBDO0FBQzFDLHNFQUdtQztBQUVuQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsb0NBQWdCO0lBQ3RELFlBQ0UsS0FBZ0IsRUFDQyxLQUErQjtRQUVoRCxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUZ0QixVQUFLLEdBQUwsS0FBSyxDQUEwQjtJQUdsRCxDQUFDO0lBRVMsb0JBQW9CO1FBQzVCLE9BQU8sSUFBQSxzQkFBZSxFQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sd0JBQXdCLENBQzdCLEtBQWdCLEVBQ2hCLElBQVksRUFDWixVQUFrQjtRQUVsQixPQUFPLElBQUksbUNBQW1DLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7OztBQWxCVSxnREFBa0I7QUFxQi9COztHQUVHO0FBQ0gsTUFBYSxtQ0FBb0MsU0FBUSw2Q0FBb0I7SUFDM0UsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsTUFBaUQ7UUFFakQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7QUFQVSxrRkFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUJhY2tlbmQgfSBmcm9tIFwiLi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IGtleXNUb1NuYWtlQ2FzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1SZW1vdGVTdGF0ZSxcbiAgRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQ29uZmlnLFxufSBmcm9tIFwiLi4vdGVycmFmb3JtLXJlbW90ZS1zdGF0ZVwiO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIENESyBmb3IgVGVycmFmb3JtIG5vIGxvbmdlciBzdXBwb3J0cyB0aGUgYXJ0aWZhY3RvcnkgYmFja2VuZC4gVGVycmFmb3JtIGRlcHJlY2F0ZWQgYXJ0aWZhY3RvcnkgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcnRpZmFjdG9yeUJhY2tlbmQgZXh0ZW5kcyBUZXJyYWZvcm1CYWNrZW5kIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBcnRpZmFjdG9yeUJhY2tlbmRDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIFwiYmFja2VuZFwiLCBcImFydGlmYWN0b3J5XCIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCk6IHsgW25hbWU6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4ga2V5c1RvU25ha2VDYXNlKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZW1vdGVTdGF0ZURhdGFTb3VyY2UoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgX2Zyb21TdGFjazogc3RyaW5nXG4gICk6IFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUFydGlmYWN0b3J5KHNjb3BlLCBuYW1lLCB0aGlzLnByb3BzKTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIENESyBmb3IgVGVycmFmb3JtIG5vIGxvbmdlciBzdXBwb3J0cyB0aGUgYXJ0aWZhY3RvcnkgYmFja2VuZC4gVGVycmFmb3JtIGRlcHJlY2F0ZWQgYXJ0aWZhY3RvcnkgaW4gdjEuMi4zIGFuZCByZW1vdmVkIGl0IGluIHYxLjMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeSBleHRlbmRzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIGNvbmZpZzogRGF0YVRlcnJhZm9ybVJlbW90ZVN0YXRlQXJ0aWZhY3RvcnlDb25maWdcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBcImFydGlmYWN0b3J5XCIsIGNvbmZpZyk7XG4gIH1cbn1cbi8qKlxuICogU3RvcmVzIHRoZSBzdGF0ZSBhcyBhbiBhcnRpZmFjdCBpbiBhIGdpdmVuIHJlcG9zaXRvcnkgaW4gQXJ0aWZhY3RvcnkuXG4gKiBHZW5lcmljIEhUVFAgcmVwb3NpdG9yaWVzIGFyZSBzdXBwb3J0ZWQsIGFuZCBzdGF0ZSBmcm9tIGRpZmZlcmVudCBjb25maWd1cmF0aW9uc1xuICogbWF5IGJlIGtlcHQgYXQgZGlmZmVyZW50IHN1YnBhdGhzIHdpdGhpbiB0aGUgcmVwb3NpdG9yeS5cbiAqXG4gKiBOb3RlOiBUaGUgVVJMIG11c3QgaW5jbHVkZSB0aGUgcGF0aCB0byB0aGUgQXJ0aWZhY3RvcnkgaW5zdGFsbGF0aW9uLlxuICogSXQgd2lsbCBsaWtlbHkgZW5kIGluIC9hcnRpZmFjdG9yeS5cbiAqXG4gKiBUaGlzIGJhY2tlbmQgZG9lcyBub3Qgc3VwcG9ydCBzdGF0ZSBsb2NraW5nLlxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB0aGlzIGJhY2tlbmQgaW4gdGhlIFRlcnJhZm9ybSBkb2NzOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIuaGFzaGljb3JwLmNvbS90ZXJyYWZvcm0vbGFuZ3VhZ2UvdjEuMi54L3NldHRpbmdzL2JhY2tlbmRzL2FydGlmYWN0b3J5XG4gKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBhcnRpZmFjdG9yeSBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBhcnRpZmFjdG9yeSBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcnRpZmFjdG9yeUJhY2tlbmRDb25maWcge1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFRoZSB1c2VybmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIChSZXF1aXJlZCkgLSBUaGUgcGFzc3dvcmRcbiAgICovXG4gIHJlYWRvbmx5IHBhc3N3b3JkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIFVSTC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgaXMgdGhlIGJhc2UgdXJsIHRvIGFydGlmYWN0b3J5IG5vdCB0aGUgZnVsbCByZXBvIGFuZCBzdWJwYXRoLlxuICAgKi9cbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiAoUmVxdWlyZWQpIC0gVGhlIHJlcG9zaXRvcnkgbmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgcmVwbzogc3RyaW5nO1xuICAvKipcbiAgICogKFJlcXVpcmVkKSAtIFBhdGggd2l0aGluIHRoZSByZXBvc2l0b3J5XG4gICAqL1xuICByZWFkb25seSBzdWJwYXRoOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgQ0RLIGZvciBUZXJyYWZvcm0gbm8gbG9uZ2VyIHN1cHBvcnRzIHRoZSBhcnRpZmFjdG9yeSBiYWNrZW5kLiBUZXJyYWZvcm0gZGVwcmVjYXRlZCBhcnRpZmFjdG9yeSBpbiB2MS4yLjMgYW5kIHJlbW92ZWQgaXQgaW4gdjEuMy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVBcnRpZmFjdG9yeUNvbmZpZ1xuICBleHRlbmRzIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyxcbiAgICBBcnRpZmFjdG9yeUJhY2tlbmRDb25maWcge31cbiJdfQ==