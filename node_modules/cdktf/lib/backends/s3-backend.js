"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateS3 = exports.S3Backend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class S3Backend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "s3");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateS3(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
S3Backend[_a] = { fqn: "cdktf.S3Backend", version: "0.17.3" };
exports.S3Backend = S3Backend;
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateS3 extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "s3", config);
    }
}
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateS3[_b] = { fqn: "cdktf.DataTerraformRemoteStateS3", version: "0.17.3" };
exports.DataTerraformRemoteStateS3 = DataTerraformRemoteStateS3;
//# sourceMappingURL=data:application/json;base64,