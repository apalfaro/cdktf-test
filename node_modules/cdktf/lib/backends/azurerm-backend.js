"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTerraformRemoteStateAzurerm = exports.AzurermBackend = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_backend_1 = require("../terraform-backend");
const util_1 = require("../util");
const terraform_remote_state_1 = require("../terraform-remote-state");
// eslint-disable-next-line jsdoc/require-jsdoc
class AzurermBackend extends terraform_backend_1.TerraformBackend {
    constructor(scope, props) {
        super(scope, "backend", "azurerm");
        this.props = props;
    }
    synthesizeAttributes() {
        return (0, util_1.keysToSnakeCase)({ ...this.props });
    }
    getRemoteStateDataSource(scope, name, _fromStack) {
        return new DataTerraformRemoteStateAzurerm(scope, name, {
            ...this.props,
            workspace: "${terraform.workspace}",
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
AzurermBackend[_a] = { fqn: "cdktf.AzurermBackend", version: "0.17.3" };
exports.AzurermBackend = AzurermBackend;
// eslint-disable-next-line jsdoc/require-jsdoc
class DataTerraformRemoteStateAzurerm extends terraform_remote_state_1.TerraformRemoteState {
    constructor(scope, id, config) {
        super(scope, id, "azurerm", config);
    }
}
_b = JSII_RTTI_SYMBOL_1;
DataTerraformRemoteStateAzurerm[_b] = { fqn: "cdktf.DataTerraformRemoteStateAzurerm", version: "0.17.3" };
exports.DataTerraformRemoteStateAzurerm = DataTerraformRemoteStateAzurerm;
//# sourceMappingURL=data:application/json;base64,