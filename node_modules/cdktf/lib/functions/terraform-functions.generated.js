"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FnGenerated = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
/*
 * This file is generated by tools/generate-function-bindings.
 * To update this file execute 'yarn run generate-function-bindings' in the root of the repository
 */
const helpers_1 = require("./helpers");
// eslint-disable-next-line jsdoc/require-jsdoc
class FnGenerated {
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/abs abs} returns the absolute value of the given number. In other words, if the number is zero or positive then it is returned as-is, but if it is negative then it is multiplied by -1 to make it positive before returning it.
     * @param {number} num
     */
    static abs(num) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("abs", [helpers_1.numericValue])(num));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/abspath abspath} takes a string containing a filesystem path and converts it to an absolute path. That is, if the path is not absolute, it will be joined with the current working directory.
     * @param {string} path
     */
    static abspath(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("abspath", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/alltrue alltrue} returns `true` if all elements in a given collection are `true` or `&#34;true&#34;`. It also returns `true` if the collection is empty.
     * @param {Array<any>} list
     */
    static alltrue(list) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("alltrue", [(0, helpers_1.listOf)(helpers_1.anyValue)])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/anytrue anytrue} returns `true` if any element in a given collection is `true` or `&#34;true&#34;`. It also returns `false` if the collection is empty.
     * @param {Array<any>} list
     */
    static anytrue(list) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("anytrue", [(0, helpers_1.listOf)(helpers_1.anyValue)])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/base64decode base64decode} takes a string containing a Base64 character sequence and returns the original string.
     * @param {string} str
     */
    static base64decode(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("base64decode", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/base64encode base64encode} applies Base64 encoding to a string.
     * @param {string} str
     */
    static base64encode(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("base64encode", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/base64gzip base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding.
     * @param {string} str
     */
    static base64gzip(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("base64gzip", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/base64sha256 base64sha256} computes the SHA256 hash of a given string and encodes it with Base64. This is not equivalent to `base64encode(sha256(&#34;test&#34;))` since `sha256()` returns hexadecimal representation.
     * @param {string} str
     */
    static base64sha256(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("base64sha256", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/base64sha512 base64sha512} computes the SHA512 hash of a given string and encodes it with Base64. This is not equivalent to `base64encode(sha512(&#34;test&#34;))` since `sha512()` returns hexadecimal representation.
     * @param {string} str
     */
    static base64sha512(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("base64sha512", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/basename basename} takes a string containing a filesystem path and removes all except the last portion from it.
     * @param {string} path
     */
    static basename(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("basename", [helpers_1.stringValue])(path));
    }
    /**
     * @internal
     * {@link https://developer.hashicorp.com/terraform/language/functions/bcrypt bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in [the _Modular Crypt Format_](https://passlib.readthedocs.io/en/stable/modular_crypt_format.html) usually expected in the shadow password file on many Unix systems.
     * @param {string} str
     * @param {Array<number>} cost
     */
    static _bcrypt(str, cost) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("bcrypt", [helpers_1.stringValue, (0, helpers_1.variadic)(helpers_1.numericValue)])(str, cost));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/can can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors.
     * @param {any} expression
     */
    static can(expression) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("can", [helpers_1.anyValue])(expression));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/ceil ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction.
     * @param {number} num
     */
    static ceil(num) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("ceil", [helpers_1.numericValue])(num));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/chomp chomp} removes newline characters at the end of a string.
     * @param {string} str
     */
    static chomp(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("chomp", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/chunklist chunklist} splits a single list into fixed-size chunks, returning a list of lists.
     * @param {Array<any>} list
     * @param {number} size
     */
    static chunklist(list, size) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("chunklist", [(0, helpers_1.listOf)(helpers_1.anyValue), helpers_1.numericValue])(list, size));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/cidrhost cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix.
     * @param {string} prefix
     * @param {number} hostnum
     */
    static cidrhost(prefix, hostnum) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("cidrhost", [helpers_1.stringValue, helpers_1.numericValue])(prefix, hostnum));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/cidrnetmask cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address.
     * @param {string} prefix
     */
    static cidrnetmask(prefix) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("cidrnetmask", [helpers_1.stringValue])(prefix));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/cidrsubnet cidrsubnet} calculates a subnet address within given IP network address prefix.
     * @param {string} prefix
     * @param {number} newbits
     * @param {number} netnum
     */
    static cidrsubnet(prefix, newbits, netnum) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("cidrsubnet", [
            helpers_1.stringValue,
            helpers_1.numericValue,
            helpers_1.numericValue,
        ])(prefix, newbits, netnum));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/cidrsubnets cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix.
     * @param {string} prefix
     * @param {Array<number>} newbits
     */
    static cidrsubnets(prefix, newbits) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("cidrsubnets", [helpers_1.stringValue, (0, helpers_1.variadic)(helpers_1.numericValue)])(prefix, newbits));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/coalesce coalesce} takes any number of arguments and returns the first one that isn&#39;t null or an empty string.
     * @param {Array<any>} vals
     */
    static coalesce(vals) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("coalesce", [(0, helpers_1.variadic)(helpers_1.anyValue)])(vals));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/coalescelist coalescelist} takes any number of list arguments and returns the first one that isn&#39;t empty.
     * @param {Array<any>} vals
     */
    static coalescelist(vals) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("coalescelist", [(0, helpers_1.variadic)(helpers_1.anyValue)])(vals));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/compact compact} takes a list of strings and returns a new list with any empty string elements removed.
     * @param {Array<string>} list
     */
    static compact(list) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("compact", [(0, helpers_1.listOf)(helpers_1.anyValue)])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/concat concat} takes two or more lists and combines them into a single list.
     * @param {Array<any>} seqs
     */
    static concat(seqs) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("concat", [(0, helpers_1.variadic)(helpers_1.anyValue)])(seqs));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/contains contains} determines whether a given list or set contains a given single value as one of its elements.
     * @param {any} list
     * @param {any} value
     */
    static contains(list, value) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("contains", [helpers_1.anyValue, helpers_1.anyValue])(list, value));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/csvdecode csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data.
     * @param {string} str
     */
    static csvdecode(str) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("csvdecode", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/dirname dirname} takes a string containing a filesystem path and removes the last portion from it.
     * @param {string} path
     */
    static dirname(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("dirname", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/distinct distinct} takes a list and returns a new list with any duplicate elements removed.
     * @param {Array<any>} list
     */
    static distinct(list) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("distinct", [(0, helpers_1.listOf)(helpers_1.anyValue)])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/element element} retrieves a single element from a list.
     * @param {any} list
     * @param {number} index
     */
    static element(list, index) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("element", [helpers_1.anyValue, helpers_1.numericValue])(list, index));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/endswith endswith} takes two values: a string to check and a suffix string. The function returns true if the first string ends with that exact suffix.
     * @param {string} str
     * @param {string} suffix
     */
    static endswith(str, suffix) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("endswith", [helpers_1.stringValue, helpers_1.stringValue])(str, suffix));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/file file} reads the contents of a file at the given path and returns them as a string.
     * @param {string} path
     */
    static file(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("file", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filebase64 filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string.
     * @param {string} path
     */
    static filebase64(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filebase64", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filebase64sha256 filebase64sha256} is a variant of `base64sha256` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filebase64sha256(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filebase64sha256", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filebase64sha512 filebase64sha512} is a variant of `base64sha512` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filebase64sha512(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filebase64sha512", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/fileexists fileexists} determines whether a file exists at a given path.
     * @param {string} path
     */
    static fileexists(path) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("fileexists", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filemd5 filemd5} is a variant of `md5` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filemd5(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filemd5", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/fileset fileset} enumerates a set of regular file names given a path and pattern. The path is automatically removed from the resulting set of file names and any result still containing path separators always returns forward slash (`/`) as the path separator for cross-system compatibility.
     * @param {string} path
     * @param {string} pattern
     */
    static fileset(path, pattern) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("fileset", [helpers_1.stringValue, helpers_1.stringValue])(path, pattern));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filesha1 filesha1} is a variant of `sha1` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filesha1(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filesha1", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filesha256 filesha256} is a variant of `sha256` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filesha256(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filesha256", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/filesha512 filesha512} is a variant of `sha512` that hashes the contents of a given file rather than a literal string.
     * @param {string} path
     */
    static filesha512(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("filesha512", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/flatten flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents.
     * @param {any} list
     */
    static flatten(list) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("flatten", [helpers_1.anyValue])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/floor floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction.
     * @param {number} num
     */
    static floor(num) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("floor", [helpers_1.numericValue])(num));
    }
    /**
     * The {@link https://developer.hashicorp.com/terraform/language/functions/format format} function produces a string by formatting a number of other values according to a specification string. It is similar to the `printf` function in C, and other similar functions in other programming languages.
     * @param {string} format
     * @param {Array<any>} args
     */
    static format(format, args) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("format", [helpers_1.stringValue, (0, helpers_1.variadic)(helpers_1.anyValue)])(format, args));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/formatdate formatdate} converts a timestamp into a different time format.
     * @param {string} format
     * @param {string} time
     */
    static formatdate(format, time) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("formatdate", [helpers_1.stringValue, helpers_1.stringValue])(format, time));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/formatlist formatlist} produces a list of strings by formatting a number of other values according to a specification string.
     * @param {string} format
     * @param {Array<any>} args
     */
    static formatlist(format, args) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("formatlist", [helpers_1.stringValue, (0, helpers_1.variadic)(helpers_1.anyValue)])(format, args));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/indent indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string.
     * @param {number} spaces
     * @param {string} str
     */
    static indent(spaces, str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("indent", [helpers_1.numericValue, helpers_1.stringValue])(spaces, str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/index index} finds the element index for a given value in a list.
     * @param {any} list
     * @param {any} value
     */
    static index(list, value) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("index", [helpers_1.anyValue, helpers_1.anyValue])(list, value));
    }
    /**
     * @internal
     * {@link https://developer.hashicorp.com/terraform/language/functions/join join} produces a string by concatenating together all elements of a given list of strings with the given delimiter.
     * @param {string} separator
     * @param {Array<Array<string>>} lists
     */
    static _join(separator, lists) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("join", [helpers_1.stringValue, (0, helpers_1.variadic)((0, helpers_1.listOf)(helpers_1.anyValue))])(separator, lists));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/jsondecode jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string.
     * @param {string} str
     */
    static jsondecode(str) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("jsondecode", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/jsonencode jsonencode} encodes a given value to a string using JSON syntax.
     * @param {any} val
     */
    static jsonencode(val) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("jsonencode", [helpers_1.anyValue])(val));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/keys keys} takes a map and returns a list containing the keys from that map.
     * @param {any} inputMap
     */
    static keys(inputMap) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("keys", [helpers_1.anyValue])(inputMap));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/length length} determines the length of a given list, map, or string.
     * @param {any} value
     */
    static lengthOf(value) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("length", [helpers_1.anyValue])(value));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/log log} returns the logarithm of a given number in a given base.
     * @param {number} num
     * @param {number} base
     */
    static log(num, base) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("log", [helpers_1.numericValue, helpers_1.numericValue])(num, base));
    }
    /**
     * @internal
     * {@link https://developer.hashicorp.com/terraform/language/functions/lookup lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead.
     * @param {any} inputMap
     * @param {string} key
     * @param {Array<any>} defaultValue
     */
    static _lookup(inputMap, key, defaultValue) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("lookup", [helpers_1.anyValue, helpers_1.stringValue, (0, helpers_1.variadic)(helpers_1.anyValue)])(inputMap, key, defaultValue));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/lower lower} converts all cased letters in the given string to lowercase.
     * @param {string} str
     */
    static lower(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("lower", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/matchkeys matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list.
     * @param {Array<any>} values
     * @param {Array<any>} keys
     * @param {Array<any>} searchset
     */
    static matchkeys(values, keys, searchset) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("matchkeys", [
            (0, helpers_1.listOf)(helpers_1.anyValue),
            (0, helpers_1.listOf)(helpers_1.anyValue),
            (0, helpers_1.listOf)(helpers_1.anyValue),
        ])(values, keys, searchset));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/max max} takes one or more numbers and returns the greatest number from the set.
     * @param {Array<number>} numbers
     */
    static max(numbers) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("max", [(0, helpers_1.variadic)(helpers_1.numericValue)])(numbers));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/md5 md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits.
     * @param {string} str
     */
    static md5(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("md5", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/merge merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments.
     * @param {Array<any>} maps
     */
    static merge(maps) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("merge", [(0, helpers_1.variadic)(helpers_1.anyValue)])(maps));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/min min} takes one or more numbers and returns the smallest number from the set.
     * @param {Array<number>} numbers
     */
    static min(numbers) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("min", [(0, helpers_1.variadic)(helpers_1.numericValue)])(numbers));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/nonsensitive nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value.
     * @param {any} value
     */
    static nonsensitive(value) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("nonsensitive", [helpers_1.anyValue])(value));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/one one} takes a list, set, or tuple value with either zero or one elements. If the collection is empty, `one` returns `null`. Otherwise, `one` returns the first element. If there are two or more elements then `one` will return an error.
     * @param {any} list
     */
    static one(list) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("one", [helpers_1.anyValue])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/parseint parseint} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive.
     * @param {any} number
     * @param {number} base
     */
    static parseint(number, base) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("parseint", [helpers_1.anyValue, helpers_1.numericValue])(number, base));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/pathexpand pathexpand} takes a filesystem path that might begin with a `~` segment, and if so it replaces that segment with the current user&#39;s home directory path.
     * @param {string} path
     */
    static pathexpand(path) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("pathexpand", [helpers_1.stringValue])(path));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/pow pow} calculates an exponent, by raising its first argument to the power of the second argument.
     * @param {number} num
     * @param {number} power
     */
    static pow(num, power) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("pow", [helpers_1.numericValue, helpers_1.numericValue])(num, power));
    }
    /**
     * @internal
     * {@link https://developer.hashicorp.com/terraform/language/functions/range range} generates a list of numbers using a start value, a limit value, and a step value.
     * @param {Array<number>} params
     */
    static _range(params) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("range", [(0, helpers_1.variadic)(helpers_1.numericValue)])(params));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/regex regex} applies a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to a string and returns the matching substrings.
     * @param {string} pattern
     * @param {string} str
     */
    static regex(pattern, str) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("regex", [helpers_1.stringValue, helpers_1.stringValue])(pattern, str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/regexall regexall} applies a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to a string and returns a list of all matches.
     * @param {string} pattern
     * @param {string} str
     */
    static regexall(pattern, str) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("regexall", [helpers_1.stringValue, helpers_1.stringValue])(pattern, str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/replace replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string.
     * @param {string} str
     * @param {string} substr
     * @param {string} replace
     */
    static replace(str, substr, replace) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("replace", [helpers_1.stringValue, helpers_1.stringValue, helpers_1.stringValue])(str, substr, replace));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/reverse reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order.
     * @param {any} list
     */
    static reverse(list) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("reverse", [helpers_1.anyValue])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/rsadecrypt rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext.
     * @param {string} ciphertext
     * @param {string} privatekey
     */
    static rsadecrypt(ciphertext, privatekey) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("rsadecrypt", [helpers_1.stringValue, helpers_1.stringValue])(ciphertext, privatekey));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sensitive sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for [sensitive input variables](/language/values/variables#suppressing-values-in-cli-output).
     * @param {any} value
     */
    static sensitive(value) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("sensitive", [helpers_1.anyValue])(value));
    }
    /**
     * The {@link https://developer.hashicorp.com/terraform/language/functions/setintersection setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common. In other words, it computes the [intersection](https://en.wikipedia.org/wiki/Intersection_\(set_theory\)) of the sets.
     * @param {Array<any>} first_set
     * @param {Array<Array<any>>} other_sets
     */
    static setintersection(first_set, other_sets) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("setintersection", [
            (0, helpers_1.listOf)(helpers_1.anyValue),
            (0, helpers_1.variadic)((0, helpers_1.listOf)(helpers_1.anyValue)),
        ])(first_set, other_sets));
    }
    /**
     * The {@link https://developer.hashicorp.com/terraform/language/functions/setproduct setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product).
     * @param {Array<any>} sets
     */
    static setproduct(sets) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("setproduct", [(0, helpers_1.variadic)(helpers_1.anyValue)])(sets));
    }
    /**
     * The {@link https://developer.hashicorp.com/terraform/language/functions/setsubtract setsubtract} function returns a new set containing the elements from the first set that are not present in the second set. In other words, it computes the [relative complement](https://en.wikipedia.org/wiki/Complement_\(set_theory\)#Relative_complement) of the second set.
     * @param {Array<any>} a
     * @param {Array<any>} b
     */
    static setsubtract(a, b) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("setsubtract", [(0, helpers_1.listOf)(helpers_1.anyValue), (0, helpers_1.listOf)(helpers_1.anyValue)])(a, b));
    }
    /**
     * The {@link https://developer.hashicorp.com/terraform/language/functions/setunion setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets. In other words, it computes the [union](https://en.wikipedia.org/wiki/Union_\(set_theory\)) of the sets.
     * @param {Array<any>} first_set
     * @param {Array<Array<any>>} other_sets
     */
    static setunion(first_set, other_sets) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("setunion", [
            (0, helpers_1.listOf)(helpers_1.anyValue),
            (0, helpers_1.variadic)((0, helpers_1.listOf)(helpers_1.anyValue)),
        ])(first_set, other_sets));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sha1 sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits.
     * @param {string} str
     */
    static sha1(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("sha1", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sha256 sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits.
     * @param {string} str
     */
    static sha256(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("sha256", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sha512 sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits.
     * @param {string} str
     */
    static sha512(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("sha512", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/signum signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign.
     * @param {number} num
     */
    static signum(num) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("signum", [helpers_1.numericValue])(num));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/slice slice} extracts some consecutive elements from within a list.
     * @param {any} list
     * @param {number} start_index
     * @param {number} end_index
     */
    static slice(list, start_index, end_index) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("slice", [helpers_1.anyValue, helpers_1.numericValue, helpers_1.numericValue])(list, start_index, end_index));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sort sort} takes a list of strings and returns a new list with those strings sorted lexicographically.
     * @param {Array<string>} list
     */
    static sort(list) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("sort", [(0, helpers_1.listOf)(helpers_1.anyValue)])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/split split} produces a list by dividing a given string at all occurrences of a given separator.
     * @param {string} separator
     * @param {string} str
     */
    static split(separator, str) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("split", [helpers_1.stringValue, helpers_1.stringValue])(separator, str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/startswith startswith} takes two values: a string to check and a prefix string. The function returns true if the string begins with that exact prefix.
     * @param {string} str
     * @param {string} prefix
     */
    static startswith(str, prefix) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("startswith", [helpers_1.stringValue, helpers_1.stringValue])(str, prefix));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/strrev strrev} reverses the characters in a string. Note that the characters are treated as _Unicode characters_ (in technical terms, Unicode [grapheme cluster boundaries](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries) are respected).
     * @param {string} str
     */
    static strrev(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("strrev", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/substr substr} extracts a substring from a given string by offset and (maximum) length.
     * @param {string} str
     * @param {number} offset
     * @param {number} length
     */
    static substr(str, offset, length) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("substr", [helpers_1.stringValue, helpers_1.numericValue, helpers_1.numericValue])(str, offset, length));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/sum sum} takes a list or set of numbers and returns the sum of those numbers.
     * @param {any} list
     */
    static sum(list) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("sum", [helpers_1.anyValue])(list));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/templatefile templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables.
     * @param {string} path
     * @param {any} vars
     */
    static templatefile(path, vars) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("templatefile", [helpers_1.stringValue, helpers_1.anyValue])(path, vars));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/textdecodebase64 textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding.
     * @param {string} source
     * @param {string} encoding
     */
    static textdecodebase64(source, encoding) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("textdecodebase64", [helpers_1.stringValue, helpers_1.stringValue])(source, encoding));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/textencodebase64 textencodebase64} encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters.
     * @param {string} str
     * @param {string} encoding
     */
    static textencodebase64(str, encoding) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("textencodebase64", [helpers_1.stringValue, helpers_1.stringValue])(str, encoding));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/timeadd timeadd} adds a duration to a timestamp, returning a new timestamp.
     * @param {string} timestamp
     * @param {string} duration
     */
    static timeadd(timestamp, duration) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("timeadd", [helpers_1.stringValue, helpers_1.stringValue])(timestamp, duration));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/timecmp timecmp} compares two timestamps and returns a number that represents the ordering of the instants those timestamps represent.
     * @param {string} timestamp_a
     * @param {string} timestamp_b
     */
    static timecmp(timestamp_a, timestamp_b) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("timecmp", [helpers_1.stringValue, helpers_1.stringValue])(timestamp_a, timestamp_b));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/timestamp timestamp} returns a UTC timestamp string in [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
     */
    static timestamp() {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("timestamp", [])());
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/title title} converts the first letter of each word in the given string to uppercase.
     * @param {string} str
     */
    static title(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("title", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/tobool tobool} converts its argument to a boolean value.
     * @param {any} v
     */
    static tobool(v) {
        return (0, helpers_1.asBoolean)((0, helpers_1.terraformFunction)("tobool", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/tolist tolist} converts its argument to a list value.
     * @param {any} v
     */
    static tolist(v) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("tolist", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/tomap tomap} converts its argument to a map value.
     * @param {any} v
     */
    static tomap(v) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("tomap", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/tonumber tonumber} converts its argument to a number value.
     * @param {any} v
     */
    static tonumber(v) {
        return (0, helpers_1.asNumber)((0, helpers_1.terraformFunction)("tonumber", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/toset toset} converts its argument to a set value.
     * @param {any} v
     */
    static toset(v) {
        return (0, helpers_1.asList)((0, helpers_1.terraformFunction)("toset", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/tostring tostring} converts its argument to a string value.
     * @param {any} v
     */
    static tostring(v) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("tostring", [helpers_1.anyValue])(v));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/transpose transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings.
     * @param {Object<string, Array<string>>} values
     */
    static transpose(values) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("transpose", [helpers_1.mapValue])(values));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/trim trim} removes the specified set of characters from the start and end of the given string.
     * @param {string} str
     * @param {string} cutset
     */
    static trim(str, cutset) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("trim", [helpers_1.stringValue, helpers_1.stringValue])(str, cutset));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/trimprefix trimprefix} removes the specified prefix from the start of the given string. If the string does not start with the prefix, the string is returned unchanged.
     * @param {string} str
     * @param {string} prefix
     */
    static trimprefix(str, prefix) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("trimprefix", [helpers_1.stringValue, helpers_1.stringValue])(str, prefix));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/trimspace trimspace} removes any space characters from the start and end of the given string.
     * @param {string} str
     */
    static trimspace(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("trimspace", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/trimsuffix trimsuffix} removes the specified suffix from the end of the given string.
     * @param {string} str
     * @param {string} suffix
     */
    static trimsuffix(str, suffix) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("trimsuffix", [helpers_1.stringValue, helpers_1.stringValue])(str, suffix));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/try try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors.
     * @param {Array<any>} expressions
     */
    static try(expressions) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("try", [(0, helpers_1.variadic)(helpers_1.anyValue)])(expressions));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/upper upper} converts all cased letters in the given string to uppercase.
     * @param {string} str
     */
    static upper(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("upper", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/urlencode urlencode} applies URL encoding to a given string.
     * @param {string} str
     */
    static urlencode(str) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("urlencode", [helpers_1.stringValue])(str));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/uuid uuid} generates a unique identifier string.
     */
    static uuid() {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("uuid", [])());
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/uuidv5 uuidv5} generates a _name-based_ UUID, as described in [RFC 4122 section 4.3](https://tools.ietf.org/html/rfc4122#section-4.3), also known as a &#34;version 5&#34; UUID.
     * @param {string} namespace
     * @param {string} name
     */
    static uuidv5(namespace, name) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("uuidv5", [helpers_1.stringValue, helpers_1.stringValue])(namespace, name));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/values values} takes a map and returns a list containing the values of the elements in that map.
     * @param {any} mapping
     */
    static values(mapping) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("values", [helpers_1.anyValue])(mapping));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/yamldecode yamldecode} parses a string as a subset of YAML, and produces a representation of its value.
     * @param {string} src
     */
    static yamldecode(src) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("yamldecode", [helpers_1.stringValue])(src));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/yamlencode yamlencode} encodes a given value to a string using [YAML 1.2](https://yaml.org/spec/1.2/spec.html) block syntax.
     * @param {any} value
     */
    static yamlencode(value) {
        return (0, helpers_1.asString)((0, helpers_1.terraformFunction)("yamlencode", [helpers_1.anyValue])(value));
    }
    /**
     * {@link https://developer.hashicorp.com/terraform/language/functions/zipmap zipmap} constructs a map from a list of keys and a corresponding list of values.
     * @param {Array<string>} keys
     * @param {any} values
     */
    static zipmap(keys, values) {
        return (0, helpers_1.asAny)((0, helpers_1.terraformFunction)("zipmap", [(0, helpers_1.listOf)(helpers_1.anyValue), helpers_1.anyValue])(keys, values));
    }
}
_a = JSII_RTTI_SYMBOL_1;
FnGenerated[_a] = { fqn: "cdktf.FnGenerated", version: "0.17.3" };
exports.FnGenerated = FnGenerated;
//# sourceMappingURL=data:application/json;base64,