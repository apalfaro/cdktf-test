"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyBase = exports.Lazy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
// Copied from https://github.com/aws/constructs/blob/e01e47f78ef1e9b600efcd23ff7705aa8d384017/lib/lazy.ts
const stack_trace_1 = require("./private/stack-trace");
const token_1 = require("./token");
/**
 * Lazily produce a value
 *
 * Can be used to return a string, list or numeric value whose actual value
 * will only be calculated later, during synthesis.
 */
class Lazy {
    /**
     * Returns a stringified token for a lazy value.
     * @param producer The producer
     * @param options Options
     */
    static stringValue(producer, options = {}) {
        return token_1.Token.asString(new LazyString(producer), options);
    }
    /**
     * Returns a numberified token for a lazy value.
     * @param producer The producer
     */
    static numberValue(producer) {
        return token_1.Token.asNumber(new LazyNumber(producer));
    }
    /**
     * Returns a list-ified token for a lazy value.
     * @param producer The producer
     * @param options Options
     */
    static listValue(producer, options = {}) {
        return token_1.Token.asList(new LazyList(producer, options), options);
    }
    /**
     * Produces a lazy token from an untyped value.
     * @param producer The lazy producer
     * @param options Options
     */
    static anyValue(producer, options = {}) {
        return new LazyAny(producer, options);
    }
}
_a = JSII_RTTI_SYMBOL_1;
Lazy[_a] = { fqn: "cdktf.Lazy", version: "0.17.3" };
exports.Lazy = Lazy;
// eslint-disable-next-line jsdoc/require-jsdoc
class LazyBase {
    constructor() {
        this.postProcessors = [];
        this.creationStack = (0, stack_trace_1.captureStackTrace)();
    }
    resolve(context) {
        return this.postProcessors.reduce((val, pp) => pp.postProcess(val, context), this.resolveLazy(context));
    }
    toString() {
        return token_1.Token.asString(this);
    }
    // will be invoked when this Lazy's resolve() method is called
    addPostProcessor(postProcessor) {
        this.postProcessors.push(postProcessor);
    }
    /**
     * Turn this Token into JSON
     *
     * Called automatically when JSON.stringify() is called on a Token.
     */
    toJSON() {
        return "<unresolved-lazy>";
    }
}
_b = JSII_RTTI_SYMBOL_1;
LazyBase[_b] = { fqn: "cdktf.LazyBase", version: "0.17.3" };
exports.LazyBase = LazyBase;
// eslint-disable-next-line jsdoc/require-jsdoc
class LazyString extends LazyBase {
    constructor(producer) {
        super();
        this.producer = producer;
    }
    resolveLazy(context) {
        return this.producer.produce(context);
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class LazyNumber extends LazyBase {
    constructor(producer) {
        super();
        this.producer = producer;
    }
    resolveLazy(context) {
        return this.producer.produce(context);
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class LazyList extends LazyBase {
    constructor(producer, options = {}) {
        super();
        this.producer = producer;
        this.options = options;
    }
    resolveLazy(context) {
        const ret = this.producer.produce(context);
        if (ret !== undefined && ret.length === 0 && this.options.omitEmpty) {
            return undefined;
        }
        return ret;
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class LazyAny extends LazyBase {
    constructor(producer, options = {}) {
        super();
        this.producer = producer;
        this.options = options;
    }
    resolveLazy(context) {
        const ret = this.producer.produce(context);
        if (Array.isArray(ret) && ret.length === 0 && this.options.omitEmptyArray) {
            return undefined;
        }
        return ret;
    }
}
//# sourceMappingURL=data:application/json;base64,