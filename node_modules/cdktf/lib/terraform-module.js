"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformModule = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const terraform_provider_1 = require("./terraform-provider");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
const tfExpression_1 = require("./tfExpression");
const terraform_asset_1 = require("./terraform-asset");
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformModule extends terraform_element_1.TerraformElement {
    constructor(scope, id, options) {
        super(scope, id, "module");
        this.source = options.source;
        if (!options.skipAssetCreationFromLocalModules) {
            if (options.source.startsWith("./") || options.source.startsWith("../")) {
                // Create an asset for the local module for better TFC support
                const asset = new terraform_asset_1.TerraformAsset(scope, `local-module-${id}`, {
                    path: options.source,
                });
                // Despite being a relative path already, further indicate it as such for Terraform handling
                this.source = `./${asset.path}`;
            }
        }
        this.version = options.version;
        this._providers = options.providers;
        this.validateIfProvidersHaveUniqueKeys();
        if (Array.isArray(options.dependsOn)) {
            this.dependsOn = options.dependsOn.map((dependency) => (0, tfExpression_1.dependable)(dependency));
        }
        this.forEach = options.forEach;
    }
    // jsii can't handle abstract classes?
    synthesizeAttributes() {
        return {};
    }
    interpolationForOutput(moduleOutput) {
        return (0, tfExpression_1.ref)(`module.${this.friendlyUniqueId}${this.forEach ? ".*" : ""}.${moduleOutput}`, this.cdktfStack);
    }
    getString(output) {
        return tokens_1.Token.asString(this.interpolationForOutput(output));
    }
    get providers() {
        return this._providers;
    }
    addProvider(provider) {
        if (!this._providers) {
            this._providers = [];
        }
        this._providers.push(provider);
        this.validateIfProvidersHaveUniqueKeys();
    }
    toTerraform() {
        const attributes = (0, util_1.deepMerge)({
            ...this.synthesizeAttributes(),
            source: this.source,
            version: this.version,
            providers: this._providers?.reduce((a, p) => {
                if (terraform_provider_1.TerraformProvider.isTerraformProvider(p)) {
                    return { ...a, [p.terraformResourceType]: p.fqn };
                }
                else {
                    return {
                        ...a,
                        [`${p.provider.terraformResourceType}.${p.moduleAlias}`]: p.provider.fqn,
                    };
                }
            }, {}),
            depends_on: this.dependsOn,
            for_each: this.forEach?._getForEachExpression(),
        }, this.rawOverrides);
        attributes["//"] = this.constructNodeMetadata;
        return {
            module: {
                [this.friendlyUniqueId]: attributes,
            },
        };
    }
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                [`module.${this.source}`]: Object.keys(this.rawOverrides),
            },
        };
    }
    validateIfProvidersHaveUniqueKeys() {
        const moduleAliases = this._providers?.map((p) => {
            if (terraform_provider_1.TerraformProvider.isTerraformProvider(p)) {
                return p.terraformResourceType;
            }
            else {
                return `${p.provider.terraformResourceType}.${p.moduleAlias}`;
            }
        });
        const uniqueModuleAliases = new Set();
        moduleAliases?.forEach((alias) => {
            if (uniqueModuleAliases.has(alias)) {
                throw new Error(`Error: Multiple providers have the same alias: "${alias}"`);
            }
            uniqueModuleAliases.add(alias);
        });
    }
}
_a = JSII_RTTI_SYMBOL_1;
TerraformModule[_a] = { fqn: "cdktf.TerraformModule", version: "0.17.3" };
exports.TerraformModule = TerraformModule;
//# sourceMappingURL=data:application/json;base64,